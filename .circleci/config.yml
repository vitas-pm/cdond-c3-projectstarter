version: 2.1

orbs:
  slack: circleci/slack@4.8.3

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws s3 rm "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
            aws s3 rb "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --force

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl -s --insecure https://kvdb.io/LAWaaMUEvwaAkXT4i9j3Ka/migration_${CIRCLE_WORKFLOW_ID:0:7})
            if(( $SUCCESS==1 ));
            then
              cd backend
              npm install
              npm run migrations:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end test
          command: |
            cd frontend
            npm install
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end test
          command: |
            cd backend
            npm install
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end audit
          command: |
            cd frontend
            npm install
            npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end audit
          command: |
            cd backend
            npm install
            npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar and gzip
          command: yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
               --query 'Reservations[*].Instances[*].PublicIpAddress' \
               --filters 'Name=tag:Name,Values="backend-${CIRCLE_WORKFLOW_ID:0:7}"' \
               --output text >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: cimg/python:3.8-node
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: [ "d4:23:23:21:6b:c6:07:ad:22:7f:70:68:59:0b:5a:6c" ]
      - attach_workspace:
          at: ~/
      - run:
          name: Install aws cli
          command: |
            sudo apt-get update
            sudo apt-get install awscli
      - run:
          name: Install Ansible
          command: |
            sudo apt update
            sudo apt install ansible
            python -m pip install --user ansible
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
          environment:
            ANSIBLE_HOST_KEY_CHECKING: false
      - destroy-environment

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [ backend-build ]
      - run:
          name: Install aws cli
          command: |
            sudo apt update
            sudo apt install -y awscli
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations:revert
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration status to kvdb.io
          command: |
            echo "insecure" >> ~/.curlrc
            if grep -q "has been executed successfully." backend/migrations_dump.txt
            then
                curl https://kvdb.io/LAWaaMUEvwaAkXT4i9j3Ka/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - destroy-environment
      - revert-migrations

  deploy-frontend:
    docker:
      - image: cimg/python:3.8-node
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Install aws cli
          command: |
            sudo apt-get update
            sudo apt-get install awscli
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters 'Name=tag:Name,Values="backend-${CIRCLE_WORKFLOW_ID:0:7}"' --output=text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            ls -a
            cd frontend
            ls -a
            cd ..
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            ls -a
            cd frontend
            ls -a
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment
      - revert-migrations

  deploy-backend:
    docker:
      - image: cimg/python:3.8-node
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: [ "d4:23:23:21:6b:c6:07:ad:22:7f:70:68:59:0b:5a:6c" ]
      - attach_workspace:
          at: ~/
      - run:
          name: Install aws cli
          command: |
            sudo apt-get update
            sudo apt-get install awscli
      - run:
          name: Install Ansible
          command: |
            sudo apt update
            sudo apt install ansible
            python -m pip install --user ansible
      - run:
          name: make env file
          command: |
            cd backend
            echo ENVIROMENT=production > .env
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> .env
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> .env
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> .env
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> .env
            echo TYPEORM_HOST=$TYPEORM_HOST >> .env
            echo TYPEORM_PORT=$TYPEORM_PORT >> .env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> .env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> .env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> .env
            cat backend/.env
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czf artifact.tar.gz .
            mkdir .circleci/ansible/roles/deploy/files
            cp artifact.tar.gz .circleci/ansible/roles/deploy/files
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
          environment:
            ANSIBLE_HOST_KEY_CHECKING: false
      - destroy-environment
      - revert-migrations

  smoke-test:
    docker:
      - image: cimg/python:3.8-node
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            sudo apt-get update
            sudo apt-get install awscli
      - attach_workspace:
          at: ~/
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(tail -1 ".circleci/ansible/inventory.txt")
            echo "${BACKEND_IP}"
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(tail -1 ".circleci/ansible/inventory.txt")
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
            echo ${URL}
            if curl -s ${URL} | grep "Welcome"
            then
                # Change this to 0 after the job fails
              return 1
            else
              return 1
            fi
      - destroy-environment
      - revert-migrations


workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
#      - test-frontend:
#          requires: [build-frontend]
#      - test-backend:
#          requires: [build-backend]
#      - scan-frontend:
#          requires: [build-frontend]
#      - scan-backend:
#          requires: [build-backend]
      - deploy-infrastructure:
          requires: [build-frontend, build-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
#      - smoke-test:
#          requires: [deploy-backend, deploy-frontend]
